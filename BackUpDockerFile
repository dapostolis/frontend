

# Stage 1: Use yarn to build the app
FROM node:14 as builder
WORKDIR /usr/src/app
COPY package.json package-lock.json ./
RUN npm install
COPY . ./
RUN npm run build

# Stage 2: Copy the JS React SPA into the Nginx HTML directory
FROM bitnami/nginx:latest
COPY --from=builder /usr/src/app/build /app
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]


#FROM registry.access.redhat.com/ubi8/nginx-118

# Add application sources to a directory that the assemble script expects them
# and set permissions so that the container runs without root access
#USER 0
#ADD frontend/build/. /tmp/src/
#RUN chown -R 1001:0 /tmp/src
#USER 1001

# Let the assemble script to install the dependencies
#RUN /usr/libexec/s2i/assemble

# Run script uses standard ways to run the application
#CMD /usr/libexec/s2i/run


#FROM nginx:stable

#ENV BACKEND_HOST=10.217.5.138:8080
# support running as arbitrary user which belogs to the root group
#RUN chmod g+rwx /var/cache/nginx /var/run /var/log/nginx
# users are not allowed to listen on priviliged ports
#RUN sed -i.bak 's/listen\(.*\)80;/listen 8081;/' /etc/nginx/conf.d/default.conf
#EXPOSE 8081
# comment user directive as master process is run as user in OpenShift anyhow
#RUN sed -i.bak 's/^user/#user/' /etc/nginx/nginx.conf

#COPY  frontend/build/ /usr/share/nginx/html

#COPY  frontend/webapp.template /etc/nginx/conf.d


#ENTRYPOINT ["sh", "-c"]
#CMD ["envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\" < /etc/nginx/conf.d/webapp.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]


#FROM registry.access.redhat.com/ubi8:8.0

#ENV BACKEND_HOST=10.217.5.138:8080

#ENV NGINX_PORT 80
#EXPOSE 80

#RUN yum install -y --disableplugin=subscription-manager --nodocs nginx nginx-mod-http-perl && yum clean all


#FROM nginxinc/nginx-unprivileged

#FROM registry.access.redhat.com/ubi8/nginx-118
#RUN  touch /etc/nginx/conf.d && chown -R nginx:nginx /usr/share/nginx/html /etc/nginx/conf.d
#USER root
#ENV NGINX_HOST 10.217.5.138
#ENV NGINX_PORT 80
#EXPOSE 80
#RUN mkdir -p  /var/cache/nginx/client_temp
#COPY  frontend/build/ /usr/share/nginx/html
#WORKDIR /usr/share/nginx/html
#ADD ./build/ .
#RUN touch /run/nginx.pid && chgrp -R 0 /var/log/nginx /run/nginx.pid && chmod -R g+rwx /var/log/nginx /run/nginx.pid /var
#WORKDIR /etc/nginx/conf.d
#ADD webapp.template .
#COPY  frontend/webapp.template /etc/nginx/conf.d
#EXPOSE 80
#USER 1001
#ENTRYPOINT ["sh", "-c"]
#CMD ["envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\" < /etc/nginx/conf.d/webapp.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]

#WORKDIR /etc/nginx/conf.d


#FROM nginx:alpine
#RUN  touch /var/run/nginx.pid && \
#     chown -R nginx:nginx /var/cache/nginx /var/run/nginx.pid
#USER nginx
#COPY --chown=nginx:nginx my/html/files /usr/share/nginx/html
#COPY --chown=nginx:nginx config/myapp/default.conf /etc/nginx/conf.d/default.conf



# Add application sources to a directory that the assemble script expects them
# and set permissions so that the container runs without root access
#USER 0
#COPY . /tmp/src/
#ADD webapp.template /etc/nginx/conf.d
#RUN chown -R 1001:0 /tmp/src
#RUN chown -R 1001:0 /etc/nginx/conf.d
#USER 1001

#WORKDIR /etc/nginx/conf.d


# Let the assemble script to install the dependencies
#RUN /usr/libexec/s2i/assemble

# Run script uses standard ways to run the application
#CMD /usr/libexec/s2i/run